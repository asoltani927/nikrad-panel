generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CountryCodeEnum {
  IR
}

enum RegionCodeEnum {
  IR_AR // آذربایجان شرقی
  IR_AZ // آذربایجان غربی
  IR_ARB // اردبیل
  IR_ESF // اصفهان
  IR_ALB // البرز
  IR_BUS // بوشهر
  IR_CHB // چهارمحال و بختیاری
  IR_KHJ // خراسان جنوبی
  IR_KHR // خراسان رضوی
  IR_KHN // خراسان شمالی
  IR_KHZ // خوزستان
  IR_ZNJ // زنجان
  IR_SMN // سمنان
  IR_SBL // سیستان و بلوچستان
  IR_FRS // فارس
  IR_QZV // قزوین
  IR_QOM // قم
  IR_KRD // کردستان
  IR_KRM // کرمان
  IR_KSH // کرمانشاه
  IR_KYB // کهگیلویه و بویراحمد
  IR_GLN // گلستان
  IR_GLN2 // گیلان
  IR_LRS // لرستان
  IR_MZN // مازندران
  IR_MRK // مرکزی
  IR_HRM // هرمزگان
  IR_HMD // همدان
  IR_YZD // یزد
}

model Country {
  code    CountryCodeEnum @id
  name    String          @unique
  regions Region[]

  @@map("countries")
}

model Region {
  code        RegionCodeEnum  @id
  name        Json
  countryCode CountryCodeEnum @map("country_code")
  country     Country         @relation(fields: [countryCode], references: [code])
  users       User[]          @relation("userRegions")
  addresses   Address[]       @relation("addressRegion")

  @@map("regions")
}

enum UserType {
  REAL
  LEGAL
}

model User {
  id    Int    @id @default(autoincrement())
  name  String
  phone String @unique
  email String

  type UserType

  firstName    String  @map("first_name")
  lastName     String  @map("last_name")
  bio          String
  experience   String
  gallery      Json
  nationalCode String?
  nationalCard Json?

  businessLicense Json?

  companyStatute   Json?
  brandCertificate Json?

  provinceCode RegionCodeEnum
  province     Region         @relation("userRegions", fields: [provinceCode], references: [code])

  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id])

  deleted   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  categoriesCreatedBy             Category[]               @relation("categoriesCreatedBy")
  categoriesUpdatedBy             Category[]               @relation("categoriesUpdatedBy")
  categoriesDeletedBy             Category[]               @relation("categoriesDeletedBy")
  NeedsCreatedBy                  Need[]                   @relation("NeedsCreatedBy")
  NeedsUpdatedBy                  Need[]                   @relation("NeedsUpdatedBy")
  NeedsDeletedBy                  Need[]                   @relation("NeedsDeletedBy")
  suggestionsCreatedBy            Suggestions[]            @relation("suggestionsCreatedBy")
  suggestionsUpdatedBy            Suggestions[]            @relation("suggestionsUpdatedBy")
  suggestionsDeletedBy            Suggestions[]            @relation("suggestionsDeletedBy")
  customFieldsCreatedBy           CustomField[]            @relation("customFieldsCreatedBy")
  customFieldsUpdatedBy           CustomField[]            @relation("customFieldsUpdatedBy")
  customFieldsDeletedBy           CustomField[]            @relation("customFieldsDeletedBy")
  materialBookCreatedBy           MaterialBook[]           @relation("materialBookCreatedBy")
  materialBookUpdatedBy           MaterialBook[]           @relation("materialBookUpdatedBy")
  materialBookDeletedBy           MaterialBook[]           @relation("materialBookDeletedBy")
  materialBookAttachmentCreatedBy MaterialBookAttachment[] @relation("materialBookAttachmentCreatedBy")
  materialBookAttachmentUpdatedBy MaterialBookAttachment[] @relation("materialBookAttachmentUpdatedBy")
  materialBookAttachmentDeletedBy MaterialBookAttachment[] @relation("materialBookAttachmentDeletedBy")
  materialBookOwners              MaterialBook[]           @relation("materialBookOwner")
  addresses                         Address[]
}

model Address {
  id   Int    @id @default(autoincrement())
  cuid String @unique @default(cuid())

  userId Int
  user   User @relation(fields: [userId], references: [id])

  regionCode RegionCodeEnum @map("region_code")
  region     Region         @relation("addressRegion", fields: [regionCode], references: [code])

  address   String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  deleted   Boolean   @default(false)
}

model Category {
  id   Int    @id @default(autoincrement())
  cuid String @unique @default(cuid())

  name String
  slug String @unique

  names Json

  parentId Int?
  parent   Category? @relation("CategoryToCategory", fields: [parentId], references: [id])

  children Category[] @relation("CategoryToCategory")

  deleted   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  createdById Int
  createdBy   User          @relation("categoriesCreatedBy", fields: [createdById], references: [id])
  updatedById Int?
  updatedBy   User?         @relation("categoriesUpdatedBy", fields: [updatedById], references: [id])
  deletedById Int?
  deletedBy   User?         @relation("categoriesDeletedBy", fields: [deletedById], references: [id])
  Need        Need[]
  CustomField CustomField[]
  User        User[]

  @@map("categories")
}

model Need {
  id   Int    @id @default(autoincrement())
  cuid String @unique @default(cuid())

  title      String
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  product      Int
  provinceCode RegionCodeEnum @map("province_code")
  city         String
  priority     Int
  deliveryDate DateTime       @map("delivery_date")

  deleted   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  createdById Int
  createdBy   User          @relation("NeedsCreatedBy", fields: [createdById], references: [id])
  updatedById Int?
  updatedBy   User?         @relation("NeedsUpdatedBy", fields: [updatedById], references: [id])
  deletedById Int?
  deletedBy   User?         @relation("NeedsDeletedBy", fields: [deletedById], references: [id])
  Suggestions Suggestions[]

  @@map("needs")
}

model Suggestions {
  id     Int    @id @default(autoincrement())
  cuid   String @unique @default(cuid())
  NeedId Int
  Need   Need   @relation(fields: [NeedId], references: [id])
  price  BigInt

  createdById Int
  createdBy   User  @relation("suggestionsCreatedBy", fields: [createdById], references: [id])
  updatedById Int?
  updatedBy   User? @relation("suggestionsUpdatedBy", fields: [updatedById], references: [id])
  deletedById Int?
  deletedBy   User? @relation("suggestionsDeletedBy", fields: [deletedById], references: [id])

  deleted   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("suggestions")
}

enum CustomFieldType {
  TEXT
  NUMBER
  CHECKBOX
  RADIO
  SELECT
  DATE
  TEXTAREA
  FILE
}

enum CustomFieldTarget {
  MATERIAL_BOOK
}

model CustomField {
  id   Int    @id @default(autoincrement())
  cuid String @unique @default(cuid())

  name     String
  title    String
  type     CustomFieldType
  required Boolean         @default(false)

  options      Json?
  defaultValue String?

  order Int?

  target CustomFieldTarget @default(MATERIAL_BOOK)
  step   Int?              @default(0) // 0: first step, 1: second step, etc.

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?      @map("category_id")

  createdById Int
  createdBy   User  @relation("customFieldsCreatedBy", fields: [createdById], references: [id])
  updatedById Int?
  updatedBy   User? @relation("customFieldsUpdatedBy", fields: [updatedById], references: [id])
  deletedById Int?
  deletedBy   User? @relation("customFieldsDeletedBy", fields: [deletedById], references: [id])

  deleted          Boolean            @default(false)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  deletedAt        DateTime?
  CustomFieldValue CustomFieldValue[]

  @@map("custom_fields")
}

model CustomFieldValue {
  id            Int         @id @default(autoincrement())
  customFieldId Int
  customField   CustomField @relation(fields: [customFieldId], references: [id])

  targetId Int @map("target_id") // target id is the id of the target of the custom field for example MaterialBookId

  value String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("custom_field_values")
}

enum MaterialBookStatus {
  DRAFT
  WAITING_FOR_PAYMENT
  WAITING_FOR_DELIVERY
  IN_PROGRESS
  COMPLETED
}

model MaterialBook {
  id     Int                @id @default(autoincrement())
  title  String
  status MaterialBookStatus @default(DRAFT)

  bookPackageInfo MaterialBookPackageInfo?

  ownerId Int
  owner   User @relation("materialBookOwner", fields: [ownerId], references: [id])

  createdById Int
  createdBy   User  @relation("materialBookCreatedBy", fields: [createdById], references: [id])
  updatedById Int?
  updatedBy   User? @relation("materialBookUpdatedBy", fields: [updatedById], references: [id])
  deletedById Int?
  deletedBy   User? @relation("materialBookDeletedBy", fields: [deletedById], references: [id])

  attachments MaterialBookAttachment[]

  deleted   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("material_book")
}

model MaterialBookAttachment {
  id             Int          @id @default(autoincrement())
  materialBookId Int
  materialBook   MaterialBook @relation(fields: [materialBookId], references: [id])

  fileId Int  @map("file_id")
  file   File @relation("materialBookAttachmentFile", fields: [fileId], references: [id])

  createdById Int
  createdBy   User  @relation("materialBookAttachmentCreatedBy", fields: [createdById], references: [id])
  updatedById Int?
  updatedBy   User? @relation("materialBookAttachmentUpdatedBy", fields: [updatedById], references: [id])
  deletedById Int?
  deletedBy   User? @relation("materialBookAttachmentDeletedBy", fields: [deletedById], references: [id])

  deleted   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model File {
  id Int @id @default(autoincrement())

  name String
  path String
  type String
  size Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  deleted   Boolean   @default(false)

  MaterialBookAttachment MaterialBookAttachment[] @relation("materialBookAttachmentFile")
}

enum PackageType {
  BASIC
  STANDARD
  PREMIUM
  CUSTOM
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELED
}

model MaterialBookPackageInfo {
  id             Int          @id @default(autoincrement())
  materialBookId Int          @unique
  materialBook   MaterialBook @relation(fields: [materialBookId], references: [id])

  packageType     PackageType
  amount          BigInt
  paymentStatus   PaymentStatus @default(PENDING)
  invoiceNumber   String?
  paidAt          DateTime?
  transactionInfo Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("material_book_package_info")
}
